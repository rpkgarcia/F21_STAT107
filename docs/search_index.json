[["introduction-to-text-data-analysis.html", "Chapter 10 Introduction To Text Data Analysis 10.1 Making Strings 10.2 Substring Operations 10.3 Dividing Strings into Vectors 10.4 Converting Objects into Strings 10.5 Versatility of the paste() Function 10.6 gsub , sub 10.7 Text of Some Importance 10.8 Search 10.9 Word Count Tables", " Chapter 10 Introduction To Text Data Analysis In this section we give an introduction to strings and string operations, how to extracting and manipulating string objects, and an introduction to general search methods. We have focus on character objects in particular because a lot of the “messy” data comes in character form. For example, web pages can be scraped, email can be analyzed for network properties and survey responses must be processed and compared. Even if you only care about numbers, it helps to be able to extract them from text and manipulate them easily. In general we will try to stick to the following distinction. However, many people will use the term “character” and “string” interchangeably. Character: a symbol in a written language, specifically what you can enter at a keyboard: letters, numerals, punctuation, space, newlines, etc. &#39;L&#39;, &#39;i&#39;, &#39;n&#39;, &#39;c&#39;, &#39;o&#39;, &#39;l&#39; String: a sequence of characters bound together Lincoln Note: R does not have a separate type for characters and strings class(&quot;L&quot;) ## [1] &quot;character&quot; class(&quot;Lincoln&quot;) ## [1] &quot;character&quot; 10.1 Making Strings Use single or double quotes to construct a string, but in general its recommeded to use double quotes. This is because the R console showcases character strings in double quotes regardless of how the string was created, and sometimes we might have single or double quotes in the string itself. &#39;Lincoln&#39; ## [1] &quot;Lincoln&quot; &quot;Lincoln&quot; ## [1] &quot;Lincoln&quot; &quot;Abraham Lincoln&#39;s Hat&quot; ## [1] &quot;Abraham Lincoln&#39;s Hat&quot; &quot;As Lincoln never said, &#39;Four score and seven beers ago&#39;&quot; ## [1] &quot;As Lincoln never said, &#39;Four score and seven beers ago&#39;&quot; &#39;As Lincoln never said, &quot;Four score and seven beers ago&quot;&#39; ## [1] &quot;As Lincoln never said, \\&quot;Four score and seven beers ago\\&quot;&quot; The space, \" \" is a character; so are multiple spaces \" \" and the empty string, \"\". Some characters are special, so we have “escape characters” to specify them in strings. - quotes within strings: \\\" - tab: \\t - new line \\n and carriage return \\r – use the former rather than the latter when possible. Recall that strings (or character objects) are one of the atomic data types, like numeric or logical. Thus strings can go into scalars, vectors, arrays, lists, or be the type of a column in a data frame. We can use the nchar() to get the length of a single string. length(&quot;Abraham Lincoln&#39;s beard&quot;) ## [1] 1 length(c(&quot;Abraham&quot;, &quot;Lincoln&#39;s&quot;, &quot;beard&quot;)) ## [1] 3 nchar(&quot;Abraham&quot;) ## [1] 7 nchar(&quot;Abraham Lincoln&#39;s beard&quot;) ## [1] 23 nchar(c(&quot;Abraham&quot;, &quot;Lincoln&#39;s&quot;, &quot;beard&quot;)) ## [1] 7 9 5 We can use print() to display the string, and cat() is used to write the string directly to the console. If you’re debugging, message() is R’s preferred syntax. presidents = c(&quot;Fillmore&quot;,&quot;Pierce&quot;,&quot;Buchanan&quot;,&quot;Davis&quot;,&quot;Johnson&quot;) print(&quot;Abraham Lincoln&quot;) ## [1] &quot;Abraham Lincoln&quot; cat(&quot;Abraham Lincoln&quot;) ## Abraham Lincoln cat(presidents) ## Fillmore Pierce Buchanan Davis Johnson message(presidents) ## FillmorePierceBuchananDavisJohnson 10.2 Substring Operations Substring: a smaller string from the big string, but still a string in its own right. A string is not a vector or a list, so we cannot use subscripts like [[ ]] or [ ] to extract substrings; we use substr() instead. phrase &lt;- &quot;Christmas Bonus&quot; substr(phrase, start=8, stop=12) ## [1] &quot;as Bo&quot; We can also use substr to replace elements: substr(phrase, 13, 13) = &quot;g&quot; phrase ## [1] &quot;Christmas Bogus&quot; The function substr() can also be used for vectors. substr() vectorizes over all its arguments: presidents ## [1] &quot;Fillmore&quot; &quot;Pierce&quot; &quot;Buchanan&quot; &quot;Davis&quot; &quot;Johnson&quot; substr(presidents,1,2) # First two characters ## [1] &quot;Fi&quot; &quot;Pi&quot; &quot;Bu&quot; &quot;Da&quot; &quot;Jo&quot; substr(presidents,nchar(presidents)-1,nchar(presidents)) # Last two ## [1] &quot;re&quot; &quot;ce&quot; &quot;an&quot; &quot;is&quot; &quot;on&quot; substr(presidents,20,21) # No such substrings so return the null string ## [1] &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; &quot;&quot; substr(presidents,7,7) # Explain! ## [1] &quot;r&quot; &quot;&quot; &quot;a&quot; &quot;&quot; &quot;n&quot; 10.3 Dividing Strings into Vectors strsplit() divides a string according to key characters, by splitting each element of the character vector x at appearances of the pattern split. scarborough.fair = &quot;parsley, sage, rosemary, thyme&quot; strsplit(scarborough.fair, &quot;,&quot;) ## [[1]] ## [1] &quot;parsley&quot; &quot; sage&quot; &quot; rosemary&quot; &quot; thyme&quot; strsplit(scarborough.fair, &quot;, &quot;) ## [[1]] ## [1] &quot;parsley&quot; &quot;sage&quot; &quot;rosemary&quot; &quot;thyme&quot; Pattern is recycled over elements of the input vector: strsplit (c(scarborough.fair, &quot;Garfunkel, Oates&quot;, &quot;Clement, McKenzie&quot;), &quot;, &quot;) ## [[1]] ## [1] &quot;parsley&quot; &quot;sage&quot; &quot;rosemary&quot; &quot;thyme&quot; ## ## [[2]] ## [1] &quot;Garfunkel&quot; &quot;Oates&quot; ## ## [[3]] ## [1] &quot;Clement&quot; &quot;McKenzie&quot; Note that it outputs a list of character vectors. 10.4 Converting Objects into Strings Explicitly converting one variable type to another is called casting. Notice that the number “7.2e12” is printed as supplied, but “7.2e5” is not. This is because if a number is exceeding large, small, or close to zero, then R will by default use scientific notation for that number. as.character(7.2) # Obvious ## [1] &quot;7.2&quot; as.character(7.2e12) # Obvious ## [1] &quot;7.2e+12&quot; as.character(c(7.2,7.2e12)) # Obvious ## [1] &quot;7.2&quot; &quot;7.2e+12&quot; as.character(7.2e5) # Not quite so obvious ## [1] &quot;720000&quot; 10.5 Versatility of the paste() Function The paste() function is very flexible. With one vector argument, works like as.character(). paste(41:45) ## [1] &quot;41&quot; &quot;42&quot; &quot;43&quot; &quot;44&quot; &quot;45&quot; With 2 or more vector arguments, it combines them with recycling. paste(presidents,41:45) ## [1] &quot;Fillmore 41&quot; &quot;Pierce 42&quot; &quot;Buchanan 43&quot; &quot;Davis 44&quot; &quot;Johnson 45&quot; paste(presidents,c(&quot;R&quot;,&quot;D&quot;)) # Not historically accurate! ## [1] &quot;Fillmore R&quot; &quot;Pierce D&quot; &quot;Buchanan R&quot; &quot;Davis D&quot; &quot;Johnson R&quot; paste(presidents,&quot;(&quot;,c(&quot;R&quot;,&quot;D&quot;),41:45,&quot;)&quot;) ## [1] &quot;Fillmore ( R 41 )&quot; &quot;Pierce ( D 42 )&quot; &quot;Buchanan ( R 43 )&quot; ## [4] &quot;Davis ( D 44 )&quot; &quot;Johnson ( R 45 )&quot; We can changing the separator between pasted-together terms. paste(presidents, &quot; (&quot;, 41:45, &quot;)&quot;, sep=&quot;_&quot;) ## [1] &quot;Fillmore_ (_41_)&quot; &quot;Pierce_ (_42_)&quot; &quot;Buchanan_ (_43_)&quot; &quot;Davis_ (_44_)&quot; ## [5] &quot;Johnson_ (_45_)&quot; paste(presidents, &quot; (&quot;, 41:45, &quot;)&quot;, sep=&quot;&quot;) ## [1] &quot;Fillmore (41)&quot; &quot;Pierce (42)&quot; &quot;Buchanan (43)&quot; &quot;Davis (44)&quot; ## [5] &quot;Johnson (45)&quot; We can also condense multiple strings together using the collapse argument. paste(presidents, &quot; (&quot;, 41:45, &quot;)&quot;, sep=&quot;&quot;, collapse=&quot;; &quot;) ## [1] &quot;Fillmore (41); Pierce (42); Buchanan (43); Davis (44); Johnson (45)&quot; Default value of collapse is NULL – that is, it won’t use it. 10.6 gsub , sub gsub is all occurances, and sub is first occurance. 10.7 Text of Some Importance “If we shall suppose that American slavery is one of those offenses which, in the providence of God, must needs come, but which, having continued through His appointed time, He now wills to remove, and that He gives to both North and South this terrible war as the woe due to those by whom the offense came, shall we discern therein any departure from those divine attributes which the believers in a living God always ascribe to Him? Fondly do we hope, fervently do we pray, that this mighty scourge of war may speedily pass away. Yet, if God wills that it continue until all the wealth piled by the bondsman’s two hundred and fifty years of unrequited toil shall be sunk, and until every drop of blood drawn with the lash shall be paid by another drawn with the sword, as was said three thousand years ago, so still it must be said”the judgments of the Lord are true and righteous altogether.\" We can read in the file with the following commands. the_url = &quot;https://raw.githubusercontent.com/rpkgarcia/LearnRBook/main/data_sets/al.txt&quot; al2 = readLines(the_url, warn = FALSE) # How many lines in the file length(al2) ## [1] 69 # See the first few lines head(al2) ## [1] &quot;Fellow countrymen: &quot; ## [2] &quot;At this second appearing to take the oath of the presidential office, there is &quot; ## [3] &quot;less occasion for an extended address than there was at the first. Then a &quot; ## [4] &quot;statement, somewhat in detail, of a course to be pursued, seemed fitting and &quot; ## [5] &quot;proper. Now, at the expiration of four years, during which public declarations &quot; ## [6] &quot;have been constantly called forth on every point and phase of the great &quot; al2 is a vector, one element per line of text 10.8 Search We can search through text strings for certain patterns. Some particularly helpful functions for doing this are grep() and grepl(). The grep() function Narrowing down entries: use grep() to find which strings have a matching search term # Returns indices for which element in al2 has the term &quot;God&quot; grep(&quot;God&quot;, al2) ## [1] 40 42 51 55 57 66 # Returns T/F values for which indices have the term &quot;God&quot; grepl(&quot;God&quot;, al2) ## [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [25] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE ## [37] FALSE FALSE FALSE TRUE FALSE TRUE FALSE FALSE FALSE FALSE FALSE FALSE ## [49] FALSE FALSE TRUE FALSE FALSE FALSE TRUE FALSE TRUE FALSE FALSE FALSE ## [61] FALSE FALSE FALSE FALSE FALSE TRUE FALSE FALSE FALSE # Returns the the elements in al2 that have the term &quot;God&quot; al2[grep(&quot;God&quot;, al2)] ## [1] &quot;Both read the same Bible, and pray to the same God; and each invokes his aid &quot; ## [2] &quot;God&#39;s assistance in wringing their bread from the sweat of other men&#39;s faces; &quot; ## [3] &quot;offenses which, in the providence of God, must needs come, but which, having &quot; ## [4] &quot;attributes which the believers in a living God always ascribe to him? Fondly &quot; ## [5] &quot;pass away. Yet, if God wills that it continue until all the wealth piled by &quot; ## [6] &quot;God gives us to see the right, let us strive on to finish the work we are in;&quot; 10.9 Word Count Tables Lets convert all the words in this document into a single string. Then we can al2 = paste(al2, collapse=&quot; &quot;) al2.words = strsplit(al2, split=&quot; &quot;)[[1]] head(al2.words) ## [1] &quot;Fellow&quot; &quot;countrymen:&quot; &quot;&quot; &quot;&quot; &quot;At&quot; ## [6] &quot;this&quot; Tabulate how often each word appears using the table() function. Then we can sort the frequencies in order using sort(). wc = table(al2.words) wc = sort(wc,decreasing=TRUE) head(wc,20) ## al2.words ## the to and of that for be in it a by this ## 77 54 25 23 22 10 9 8 8 8 7 7 7 ## which all we as but his is ## 7 6 6 5 5 5 5 Notice that puncuation using these methods is still present. wc[&quot;years&quot;] ## years ## 3 wc[&quot;years,&quot;] ## years, ## 1 In addition, all our words and string subsets are case sensitive. # What happens when we look for a word that is not in our # word count table? # words are case sensitive wc[&quot;that&quot;] ## that ## 10 which(names(wc) == &quot;That&quot;) ## integer(0) wc[&quot;That&quot;] ## &lt;NA&gt; ## NA "]]
